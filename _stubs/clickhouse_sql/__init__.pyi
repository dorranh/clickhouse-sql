# If you want to use mypy or pyright, you may have to ignore some errors, like below:

# mypy: disable-error-code="type-arg"

from typing import overload, List
import numpy as np

NumberType = (int, float, np.number)

# !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!  AUTOGENERATED CODE !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
# <litgen_stub> // Autogenerated code below! Do not edit!
####################    <generated_from:DummyLib.h>    ####################



# <submodule dummy_lib>
class dummy_lib:  # Proxy class that introduces typings for the *submodule* dummy_lib
    pass  # (This corresponds to a C++ namespace. All method are static!)
    """ namespace DummyLib"""

    class DummyClass:
        """*
         * @brief A simple demonstration class for testing Python bindings
         *
         * This class provides basic functionality to test the nanobind + litgen
         * binding pipeline. It includes various data types and methods that
         * are commonly used in C++ applications.

        """
        @overload
        def __init__(self) -> None:
            """*
                 * @brief Default constructor
                 *
                 * Creates a DummyClass with default name "unnamed" and value 0

            """
            pass

        @overload
        def __init__(self, name: str) -> None:
            """*
                 * @brief Constructor with custom name
                 * @param name The name to assign to this instance
                 *
                 * Creates a DummyClass with the specified name and default value 0

            """
            pass


        def get_name(self) -> str:
            """*
                 * @brief Get the current name of this instance
                 * @return The name as a string

            """
            pass

        def set_name(self, name: str) -> None:
            """*
                 * @brief Set the name of this instance
                 * @param name The new name to assign

            """
            pass

        def get_value(self) -> int:
            """*
                 * @brief Get the current numeric value
                 * @return The current value as an integer

            """
            pass

        def set_value(self, value: int) -> None:
            """*
                 * @brief Set the numeric value
                 * @param value The new value to assign

            """
            pass

        def get_numbers(self) -> List[int]:
            """*
                 * @brief Get the list of numbers stored in this instance
                 * @return A vector containing all stored numbers

            """
            pass

        def add_number(self, num: int) -> None:
            """*
                 * @brief Add a number to the internal list
                 * @param num The number to add to the list

            """
            pass


    class DummyStruct:
        """*
         * @brief A simple struct for testing struct bindings
         *
         * This struct demonstrates how to bind C++ structs with public members
         * to Python. All members are public and can be accessed directly.

        """
        name: str   #/< The name of this struct instance
        value: int  #/< A numeric value
        flag: bool  #/< A boolean flag

        @overload
        def __init__(self) -> None:
            """*
                 * @brief Default constructor
                 *
                 * Creates a DummyStruct with default values: name="default", value=0, flag=False

            """
            pass

        @overload
        def __init__(self, n: str, v: int, f: bool) -> None:
            """*
                 * @brief Constructor with custom values
                 * @param n The name to assign
                 * @param v The numeric value to assign
                 * @param f The boolean flag to assign

            """
            pass

    # Some free functions

    @staticmethod
    def greet(name: str) -> str:
        """*
         * @brief Generate a greeting message
         * @param name The name to greet
         * @return A greeting string in the format "Hello, {name}!"
         *
         * This function demonstrates simple string manipulation and return values

        """
        pass

    @staticmethod
    def add(a: int, b: int) -> int:
        """*
         * @brief Add two integers
         * @param a First integer
         * @param b Second integer
         * @return The sum of a and b
         *
         * Basic arithmetic function to test numeric parameter passing

        """
        pass

    @staticmethod
    def multiply(a: float, b: float) -> float:
        """*
         * @brief Multiply two floating-point numbers
         * @param a First number
         * @param b Second number
         * @return The product of a and b
         *
         * Demonstrates floating-point arithmetic and different numeric types

        """
        pass

    @staticmethod
    def create_range(start: int, end: int) -> List[int]:
        """*
         * @brief Create a range of integers
         * @param start The starting value (inclusive)
         * @param end The ending value (inclusive)
         * @return A vector containing integers from start to end
         *
         * This function demonstrates returning containers and range-based logic

        """
        pass

    # Template function example



# </submodule dummy_lib>
####################    </generated_from:DummyLib.h>    ####################

# </litgen_stub>
# !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!  AUTOGENERATED CODE END !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!